# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

strategy:
  matrix:
    linux:
      imageName: 'MMSUbuntu20.04TLS'
    windows:
      imageName: 'MMS2019TLS'

pool:
    name: '1ES-Hosted-AzFunc'
    demands:
      - ImageOverride -equals $(imageName)

variables:
  artifactName: 'azure-functions-durable-ps'
  # Every build will increment
  buildNumber: $[counter('build', 001) ]
  modulePath: './test/E2E/durableApp/Modules/AzureFunctions.PowerShell.Durable.SDK'

steps:
- pwsh: |
    $simulateReleaseBuild = $null
    Write-Host "SimulateReleaseBuild set to $env:SimulateReleaseBuild"
    if (-not([bool]::TryParse($env:SimulateReleaseBuild, [ref] $simulateReleaseBuild)))
    {
        throw "SimulateReleaseBuild can only be set to true or false."
    }

    $isReleaseBuild = $false
    if ($env:BuildSourceBranchName -like "release_*" -or $simulateReleaseBuild)
    {
        $isReleaseBuild = $true
    }
    Write-Host "Setting IsReleaseBuild to $isReleaseBuild because SimulateReleaseBuild is $env:SimulateReleaseBuild"
    Write-Host "##vso[task.setvariable variable=IsReleaseBuild]$isReleaseBuild"
    Write-Host "IsReleaseBuild: $isReleaseBuild"
  displayName: Set IsReleaseBuild pipeline variable
  env:
    SimulateReleaseBuild: $(SimulateReleaseBuild)

- pwsh: |
      # We only generate an SBOM for release or simulated release builds
      Write-Host "Running ./build.ps1 -Configuration Release -AddSBOM:$shouldAddSBOM..."
      ./build.ps1 -Configuration Release -AddSBOM:$shouldAddSBOM
  displayName: 'Build Durable SDK'
  env:
    SBOMUtilSASUrl: $(SBOMUtilSASUrl)

- pwsh: ./test/E2E/Start-E2ETest.ps1 -NoBuild -UseCoreToolsBuildFromIntegrationTests
  env:
    AzureWebJobsStorage: $(AzureWebJobsStorage)
  displayName: 'Run E2E tests'

- pwsh: |
    $artifactName = $env:artifactName
    $buildNumber = $env:buildNumber
    $modulePath = $env:modulePath
    $src = $env:src
    
    Write-Host "Creating 'package' directory..."
    New-Item "$src/package" -ItemType Directory
    Write-Host "Running 'tar -czvf $src/package/$artifactName-$buildNumber.tar.gz -C $modulePath .'..."
    tar -czvf $src/package/$artifactName-$buildNumber.tar.gz -C $modulePath .
  displayName: 'Tar build artifacts'
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))
  env:
    artifactName: $(artifactName)
    buildNumber: $(buildNumber)
    modulePath: $(modulePath)
    src: $(Build.SourcesDirectory)

- task: PublishBuildArtifacts@1
  displayName: 'Publish .tar artifact'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/package
    ArtifactName: $(artifactName)-$(buildNumber).tar.gz
  condition: and(succeeded(), eq(variables['IsReleaseBuild'], 'true'))

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()
  displayName: 'Publish tests results'